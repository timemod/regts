// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// add_labels_df
/* Add labels to the columns of a data frame.  * The data frame is modified in place. The function returns NULL */ SEXP add_labels_df(List& df, CharacterVector& labels);
RcppExport SEXP _regts_add_labels_df(SEXP dfSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type labels(labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(add_labels_df(df, labels));
    return rcpp_result_gen;
END_RCPP
}
// agg_gr
List agg_gr(NumericMatrix ts_old, const int freq_new, const std::string& method);
RcppExport SEXP _regts_agg_gr(SEXP ts_oldSEXP, SEXP freq_newSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ts_old(ts_oldSEXP);
    Rcpp::traits::input_parameter< const int >::type freq_new(freq_newSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(agg_gr(ts_old, freq_new, method));
    return rcpp_result_gen;
END_RCPP
}
// disagg_spline
List disagg_spline(NumericMatrix ts_old, const int freq_new, const std::string& constraint, const std::string& method);
RcppExport SEXP _regts_disagg_spline(SEXP ts_oldSEXP, SEXP freq_newSEXP, SEXP constraintSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ts_old(ts_oldSEXP);
    Rcpp::traits::input_parameter< const int >::type freq_new(freq_newSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(disagg_spline(ts_old, freq_new, constraint, method));
    return rcpp_result_gen;
END_RCPP
}
// moving_average
NumericMatrix moving_average(NumericMatrix& x, NumericVector& w, const int from, const int to, const bool keep_range);
RcppExport SEXP _regts_moving_average(SEXP xSEXP, SEXP wSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP keep_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const int >::type to(toSEXP);
    Rcpp::traits::input_parameter< const bool >::type keep_range(keep_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_average(x, w, from, to, keep_range));
    return rcpp_result_gen;
END_RCPP
}
// parse_period
/* This function converts a character vector to a period object or to  * a list of periods objects if the length of the vector > 1 */ SEXP parse_period(const CharacterVector period_text, double frequency);
RcppExport SEXP _regts_parse_period(SEXP period_textSEXP, SEXP frequencySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector >::type period_text(period_textSEXP);
    Rcpp::traits::input_parameter< double >::type frequency(frequencySEXP);
    rcpp_result_gen = Rcpp::wrap(parse_period(period_text, frequency));
    return rcpp_result_gen;
END_RCPP
}
// parse_period_range
NumericVector parse_period_range(const std::string& period_text, double frequency);
RcppExport SEXP _regts_parse_period_range(SEXP period_textSEXP, SEXP frequencySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type period_text(period_textSEXP);
    Rcpp::traits::input_parameter< double >::type frequency(frequencySEXP);
    rcpp_result_gen = Rcpp::wrap(parse_period_range(period_text, frequency));
    return rcpp_result_gen;
END_RCPP
}
// is_period_text
LogicalVector is_period_text(std::vector<std::string> strings, const double frequency);
RcppExport SEXP _regts_is_period_text(SEXP stringsSEXP, SEXP frequencySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< const double >::type frequency(frequencySEXP);
    rcpp_result_gen = Rcpp::wrap(is_period_text(strings, frequency));
    return rcpp_result_gen;
END_RCPP
}
// get_period_range
NumericVector get_period_range(const SEXP& x);
RcppExport SEXP _regts_get_period_range(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_period_range(x));
    return rcpp_result_gen;
END_RCPP
}
// regts_to_list_rcpp
List regts_to_list_rcpp(SEXP& ts);
RcppExport SEXP _regts_regts_to_list_rcpp(SEXP tsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type ts(tsSEXP);
    rcpp_result_gen = Rcpp::wrap(regts_to_list_rcpp(ts));
    return rcpp_result_gen;
END_RCPP
}
// rel2index_cpp
NumericMatrix rel2index_cpp(NumericMatrix& grts, int first_base_row);
RcppExport SEXP _regts_rel2index_cpp(SEXP grtsSEXP, SEXP first_base_rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type grts(grtsSEXP);
    Rcpp::traits::input_parameter< int >::type first_base_row(first_base_rowSEXP);
    rcpp_result_gen = Rcpp::wrap(rel2index_cpp(grts, first_base_row));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_regts_add_labels_df", (DL_FUNC) &_regts_add_labels_df, 2},
    {"_regts_agg_gr", (DL_FUNC) &_regts_agg_gr, 3},
    {"_regts_disagg_spline", (DL_FUNC) &_regts_disagg_spline, 4},
    {"_regts_moving_average", (DL_FUNC) &_regts_moving_average, 5},
    {"_regts_parse_period", (DL_FUNC) &_regts_parse_period, 2},
    {"_regts_parse_period_range", (DL_FUNC) &_regts_parse_period_range, 2},
    {"_regts_is_period_text", (DL_FUNC) &_regts_is_period_text, 2},
    {"_regts_get_period_range", (DL_FUNC) &_regts_get_period_range, 1},
    {"_regts_regts_to_list_rcpp", (DL_FUNC) &_regts_regts_to_list_rcpp, 1},
    {"_regts_rel2index_cpp", (DL_FUNC) &_regts_rel2index_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_regts(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
