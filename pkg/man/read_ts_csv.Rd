% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_ts_csv.R
\name{read_ts_csv}
\alias{read_ts_csv}
\title{Read timeseries from a csv file}
\usage{
read_ts_csv(filename, skiprow = 0, skipcol = 0, rowwise, frequency = NA,
  labels = c("after", "before", "no"), sep = "auto", fill = FALSE,
  dec = if (sep != ".") "." else ",", na_string = "", name_fun, period_fun,
  strict = TRUE, warn_dupl = TRUE, verbose = FALSE)
}
\arguments{
\item{filename}{a string with the filename.}

\item{skiprow}{the number of rows to skip.
If 0 (default) and if argument \code{fill} is \code{FALSE},
then comment rows are automatically skipped.
See Details.}

\item{skipcol}{the number of columns to skip.}

\item{rowwise}{a logical value: are the timeseries stored rowwise?
If not specified, then \code{read_ts_csv} tries to figure out itself if
the timeseries are stored rowwise or columnwise.}

\item{frequency}{the frequency of the timeseries.
This argument is mandatory if the file contains a period texts without
frequency indicator (for example "2011-1").}

\item{labels}{label option. See Details.}

\item{sep}{the separator between columns. If not specified, then
the separator is determined automatically by inspecting the
first 30 lines of the csv file (see the details of function
\code{\link[data.table]{fread}}).}

\item{fill}{logical (default is \code{FALSE}). If \code{TRUE} then in case
the rows have unequal length, blank fields are implicitly filled
with \code{NA}.}

\item{dec}{the decimal separator as in \code{base::read.csv}.
If not "." (default) then usually ",".}

\item{na_string}{Character vector of strings to use for missing values.
By default, \code{read_ts_csv} treats blank cells as missing data.}

\item{name_fun}{function to apply to the names of the timeseries.}

\item{period_fun}{function applied to period texts. This should be a function
that converts a character vector to another character vector or a
\code{period} vector with the same length. Use this argument if the period
texts do not have a
standard format (see Description).}

\item{strict}{A logical. If \code{TRUE} (the default) all periods between the
start and the end period must be present.
Otherwise the timeseries are filled with \code{NA} for the missing periods.}

\item{warn_dupl}{A logical. If \code{TRUE} (the default), a warning is
issued if there are duplicate column names in the returned timeseries object.}

\item{verbose}{A logical (default \code{FALSE}). If \code{TRUE}, the function
prints the filename, the number of timeseries read, the period range, and
the elapsed time.}
}
\value{
a \code{regts} object
}
\description{
This function reads timeseries from a csv file,
employing function \code{\link[data.table]{fread}} of package
\code{data.table}.
The functions searches for period texts and automatically
determines how the timeseries are stored (rowwise or columnwise)
and which columns contain the numerical values of the timeseries.
Period texts should have the format recognized by function
\code{\link{period}}, for example \code{"2010Q2"}, \code{"2010.2Q"},
\code{"2010m2"}, \code{"2011"} or \code{"2011-1"}. Use argument
\code{period_fun} if the period texts have a different format.
}
\details{
In many cases, this function will read timeseries correctly.
If the function fails or if the result is not what you want,
it might help to specify arguments \code{rowwise}, \code{frequency},
\code{period_fun}, \code{skipcol} or \code{skiprow}.
Specify option  \code{rowwise} if you know
that the timeseries are stored rowwise or columnwise. Specify
argument \code{frequency} if you already know the frequency of the
timeseries.
Arguments \code{skipcol} and \code{skiprow} can be used to read only a
part of the file.
If that does not help, then you can read the data into a data frame
(for example by using function \code{\link{read.csv}} or function
\code{\link[data.table]{fread}} of package \code{data.table}),
then convert the data frame to a standard columnwise data frame
and finally convert it to a \code{\link{regts}} by using function
\code{\link{as.regts}}.

If argument \code{rowwise} has not been specified, then
function \code{read_ts_csv} tries to guess if the timeseries are stored
rowwise or columnwise based on the positions of the fields with period texts.

\strong{rowwise timeseries}

For rowwise timeseries, the function searches for the first
row with periods. All rows before the period row are ignored.
Columns without a valid period in the period row are also ignored.
The first non-empty column should contain the timeseries names
(or labels if argument \code{labels = "before"}, see the discussion below).
Otherwise use argument \code{skipcol} to specify the number of
columns to skip.

\if{html}{\figure{xlsschemarowwise.jpg}{options: width=200}}
\if{latex}{\figure{xlsschemarowwise.jpg}{options: width=5in}}

There may be more than one column before the columns with timeseries values
(data columns). In that case one column should contain the variable names.
The other columns before the first data column are used to create
timeseries labels (see \code{\link{ts_labels}}). If argument
\code{labels = "after"} (default), then the first column contains the
variable names. If \code{labels = "no"} the first column
also contains variable names but the other columns before the first data
column are ignored. If argument \code{labels = "before"}, then the variable
names should be in the last column before the first data column.

With argument \code{name_fun} a function can be applied to names of the
timeseries, e.g. \code{\link{tolower}}.

\strong{columnwise timeseries}

For columnwise timeseries, the first non-empty row that is not skipped (see
argument \code{skiprow}) should contain the variable names
(or labels if argument \code{labels = "before"}, see the discussion below).
The periods can be in any column.
Rows without a valid period in the period column are ignored.
All columns to the left of the period column are also ignored.

\if{html}{\figure{xlsschemacolumnwise.jpg}{options: width=200}}
\if{latex}{\figure{xlsschemacolumnwise.jpg}{options: width=5in}}

There may be more than one row before the rows with timeseries values
(data rows). In that case one row should contain the variable names.
The other rows before the first data row are used to create
timeseries labels (see \code{\link{ts_labels}}).
If argument  \code{labels = "after"} (default), then the first
row contains the variable names. If \code{labels = "no"} the first row
also contains variable names but the other rows before the first data
row are ignored. If argument \code{labels = "before"}, then the variable
names should be in the last row before the first data row.

\strong{automatic row skip}

If \code{skiprow = 0}, then the first rows with less columns than
the rest of the file are automatically skipped. These rows are assumed
to be comment rows. This procedure is described in detail
in the documentation of function
\code{\link[data.table]{fread}} of the \code{data.table} package.
Briefly, \code{fread} first determines the number of columns
and then searches for the first data row based on this number of columns.
All rows before this data row are skipped.

If argument \code{fill} is \code{TRUE}, then all rows have the same
number of columns, and automatic row skipping is therefore
disabled.
}
\examples{
\dontrun{
read_ts_csv("series.csv", sep = ";", dec = ",")
read_ts_csv("data.csv", labels = "after", name_fun = tolower)
}

}
\seealso{
\code{\link{write_ts_csv}} and \code{\link{read_ts_xlsx}}
}
