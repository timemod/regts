% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate_gr.R
\name{aggregate_gr}
\alias{aggregate_gr}
\title{Convert timeseries with absolute or relative changes to a lower
frequency}
\usage{
aggregate_gr(x, method = c("pct", "rel", "difmean", "difsum", "dif1s",
  "dif1"), nfrequency = 1)
}
\arguments{
\item{x}{a \code{\link[stats]{ts}} or \code{\link{regts}} object}

\item{method}{aggregation methods. See Details.}

\item{nfrequency}{the frequency of the result. This should be higher than
the frequency of timeseries \code{x}}
}
\value{
a \code{regts} with frequency \code{nfrequency}
}
\description{
This function implements temporal aggregation for timeseries with absolute,
relative or percentage changes. As shown in vignette
\href{../doc/aggregation.pdf}{\emph{"Temporal Aggregation of
(Growth) Timeseries"}},
the standard function \code{\link[stats]{aggregate}} does not yield correct
results for these type of timeseries.
}
\details{
There are methods for different types of input timeseries.
The \code{"pct"} and \code{"rel"} methods assume timeseries that contain
percentage or relative changes and calculate the exact percentage or relative
change in the output frequency.
The \code{"difmean"} and \code{"difsum"} methods assume that the input timeseries
contain a first difference. The result is a first difference in the output frequency.
Method names \code{"dif1s"} and \code{"dif1"} are obsolete and have been
replaced by \code{"difmean"} and \code{"difsum"}, respectively.
More details for the various methods are provided in vignette
\href{../doc/aggregation.pdf}{\emph{"Temporal Aggregation of
(Growth) Timeseries"}}.

Methods \code{"pct"} and \code{"rel"} use the same definition of the relative change
as in function \code{\link{growth}}:
\code{growth(x) = (x[t] - x[t-1]) / x[t-1]} (note that the denominator is not
the absolute value of \code{x[t-1]}).
}
\examples{
ts_q <- regts(abs(rnorm(10)), start = "2016Q1")
aggregate_gr(ts_q, method = "difmean")

ts_m <- regts(matrix(abs(rnorm(20)), ncol = 2), start = "2017M1", names = c("a", "b"))
aggregate_gr(ts_m, method = "rel", nfrequency = 4)
}
