% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_ts.R
\name{write_ts_xlsx/write_ts_sheet}
\alias{write_ts_xlsx/write_ts_sheet}
\alias{write_ts_xlsx}
\alias{write_ts_sheet}
\title{Functions for writing timeseries to an xlsx file.}
\usage{
write_ts_xlsx(x, file, sheet_name = "Sheet1", rowwise = TRUE,
  append = FALSE, labels = c("after", "before", "no"), comments,
  number_format, period_as_date = FALSE, verbose = FALSE)

write_ts_sheet(x, wb, sheet_name = "Sheet1", rowwise = TRUE,
  labels = c("after", "before", "no"), comments, number_format,
  period_as_date = FALSE, verbose = FALSE)
}
\arguments{
\item{x}{a \code{\link{ts}} or \code{\link{regts}} object}

\item{file}{the filename of the output file}

\item{sheet_name}{the sheet name}

\item{rowwise}{a logical value: should the timeseries be written rowwise?}

\item{append}{If \code{FALSE} (the default), then the original file,
if it exists, is replaced with the new file. All original data is lost.
If \code{TRUE}, then only data on the sheet with
the specified sheet name is erased and replaced with new data.  If the sheet
does not yet exist, then a new sheet is created and appended to the
original file.}

\item{labels}{should labels be written, and if so before or after
the names? By default, labels are written after the names if present}

\item{comments}{a character vector or data frame. The comments
are written to the beginning of the sheet, before the timeseries data is
written.}

\item{number_format}{a character value specifying the number format.
For example, \code{"#.00"} corresponds to two decimal spaces.
For details see the description of the function
\code{\link[openxlsx]{createStyle}}
in the \code{\link[openxlsx]{openxlsx}} package.}

\item{period_as_date}{A logical (default \code{FALSE}).
If \code{TRUE} the periods are written as date values to the Excel file.
By default the periods are written as characters using the standard
\code{regts} format (e.g. \code{"2010Q2"}, see \code{\link{period}}).}

\item{verbose}{A logical (default \code{FALSE}). If \code{TRUE}, the function
prints the file and sheet name, the number of timeseries written, the period
range, and the elapsed time.}

\item{wb}{a \code{Workbook} object created with function
\code{\link[openxlsx]{createWorkbook}} or
\code{\link[openxlsx]{loadWorkbook}}
of package \code{\link[openxlsx]{openxlsx}}}
}
\description{
These functions can be used to write timeseries to a sheet of an
xlsx file. \code{write_ts_xlsx} creates or opens an Excel workbook
(depending on argument \code{append}) and writes the timeseries to
a sheet with a specified name.
\code{write_ts_sheet} writes timeseries to a sheet of a \code{Workbook}
object created with function \code{\link[openxlsx]{createWorkbook}}
or \code{\link[openxlsx]{loadWorkbook}}
of package \code{\link[openxlsx]{openxlsx}}.
}
\details{
The functions employ package
\code{\link[openxlsx]{openxlsx}}
package for writing the Excel file.

If you want to write multiple timeseries objects to different
sheets, you can use \code{write_ts_xlsx} with argument
\code{append = TRUE}. Alternatively,
you can create a \code{Workbook} object with
function \code{\link[openxlsx]{createWorkbook}} of package
\code{openxlsx} and then add a sheet with \code{write_ts_sheet}.
The latter approach is more efficient.
When the workbook is written to a file with function
\code{\link[openxlsx]{saveWorkbook}}, it is often useful to
set the minimum column width option for package \code{openxlsx},
as shown in the example below.
}
\section{Functions}{
\itemize{
\item \code{write_ts_xlsx()}: writes timeseries to an Excel
workbook

\item \code{write_ts_sheet()}: writes a timeseries to a
\code{Workbook} object

}}
\examples{
# create a timeseries object
ts1 <- regts(matrix(rnorm(50), ncol =  2), names = c("a", "b"),
             labels = c("Timeseries a", "Timeseries b"), start = "2017Q2")

# write timeseries ts1 to an Excel file
write_ts_xlsx(ts1, file = "ts1.xlsx", sheet_name = "ts1", labels = "after")

# write two sheets using write_ts_sheet
library(openxlsx)
wb <- createWorkbook()
write_ts_sheet(ts1, wb, "ts1", labels = "after")
write_ts_sheet(ts1 * 100, wb, "ts1_times_100", labels = "after")

# Set the minimum column width. saveWorkbook will adjust
# the column widths for the sheets written by write_ts_xlsx,
# Setting a minimum column width prevents that some columns are very
# narrow.
options("openxlsx.minWidth" = 8.43)

# Save the workbook with openxlsx::saveWorkbook. Function saveWorkbook
# sometimes only gives a warning, and not an error, when something goes
# wrong, for example if the file is not writable.
# However, if argument returnValue = TRUE, saveWorkbook returns TRUE in case
# of success and else FALSE. The recommended way to save the workbook is
# therefore something like the following code:
output_file <- "timeseries.xlsx"
ok <- saveWorkbook(wb, output_file, overwrite = TRUE, returnValue = TRUE)
if (!ok) {
  stop("Failed to save workbook to file '", output_file,
       "'. Check warnings.")
}

# write a timeseries with comments
comments <- c("Timeseries ts1 is created at the CPB",
              "using a random number generator")
write_ts_xlsx(ts1, file = "ts_comments.xlsx", sheet_name = "ts1",
              comments = comments)
\dontshow{
   unlink("ts1.xlsx")
   unlink("timeseries.xlsx")
   unlink("ts_comments.xlsx")
}
}
\seealso{
\code{\link{read_ts_xlsx}} and \code{\link{write_ts_csv}}
}
